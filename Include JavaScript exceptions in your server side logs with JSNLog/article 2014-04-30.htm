<p>
    Integrating JavaScript exception logging with your server side logs.
</p>

<ul class="download">
    <li><a href="http://www.nuget.org/packages?q=jsnlog">Install JSNLog with Nuget (recommended)</a></li>
    <li><a href="http://jsnlog.com" target="_blank">Documentation and source code</a></li>
</ul>


<h2>Introduction</h2>
<p>
    The <a href="http://jsnlog.com">JSNLog JavaScript logging package</a> is a JavaScript counterpart to Log4Net, NLog, Elmah, etc.
It lets you insert loggers in your JavaScript code. It automatically sends the log messages to a server side component which then
inserts them in your existing server side log. It supports Log4Net, NLog, Elmah and Common.Logging.    
    </p>
<p>
Because it has sensible default configuration settings, you can start logging right away after you have installed the 
<a href="http://www.nuget.org/packages?q=jsnlog">JSNLog Nuget package</a>.
</p>
<p>
It has many options, from stack traces for JavaScript exceptions to request ids to correlate messages and various filters
to cut down the volume of log messages. You can also log to the browser console, so there is no more need to litter your code with
console.log statements. This can all be configured in your web.config, or in your JavaScript.
</p>

<h2>Why and how</h2>

<h3>
    Your web site consists of C#/VB code running on the server, and JavaScript running on the browser.
</h3>
<img src="jsnlog-candjs.png" />

<h3>
    When an exception happens in your C#/VB code, you log it, so you can fix the bug.
</h3>
<p>
    Using your server side logging package, such as Log4Net, NLog or Elmah, with loggers configured via web.config. 
</p>

<pre>try
{
    ....
}
catch (Exception e)
{
    ILog log = LogManager.GetLogger(&quot;serverlogger&quot;);
    log.Fatal(e.ToString());
}</pre>

<img src="jsnlog-logc.png" />

<h3>
But what about exceptions in your JavaScript code?
</h3>
<pre>try
{
    ....
}
catch(err)
{
    ????
}
</pre>
<img src="jsnlog-logjs.png" />

<h3>
Log the JavaScript exception on the client with JSNLog, which sends it to the server.
</h3>
<p>
     JSNLog will pass the JavaScript exception log message with its stack trace on to your server side logging package, 
    so it winds up in your server side logs. You can log extra information, such as the values of variables.
    </p>
<pre>try
{
    ....
}
catch(e)
{
    // Log the exception, complete with stack trace
    JL(&quot;jsLogger&quot;).fatalException({ "msg": "something went wrong!", "variable1": variable1, ... }, e);
}
</pre>
<p>
Or use a window.onerror handler, to catch all uncaught exceptions:
</p>

<pre>window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
    JL("onerrorLogger").fatalException({
        "msg": "something went wrong!", 
        "errorMsg": errorMsg, "url": url, 
        "line number": lineNumber, "column": column
    }, errorObj);
        
    return false;
}</pre>

<p>
<a href="http://jsnlog.com/Documentation/GetStartedLogging/ExceptionLogging" target="_blank">More about JavaScript exception logging</a>
</p>


<img src="jsnlog-solution.png" />


<h2>Benefits</h2>


<ul>
    <li>
        Extensive <a href="http://jsnlog.com">documentation</a>. Easy to install.
    </li>
    <li>
        No need to pay fees to a third party logging service.
    </li>
    <li>
JavaScript log messages go into the same logs as your server side log messages.
    </li>
    <li>
        Or send JavaScript log messages to the browser console.
    </li>
    <li>
  Uses a tiny JavaScript library that can be loaded as an 
<a href="http://jsnlog.com/Documentation/GetStartedLogging/LoadingJsFile">AMD module</a> or with a simple script tag, or as part of 
a <a href="http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification">bundle</a>.
    </li>
    <li>
        <a href="http://jsnlog.com/Documentation/GetStartedLogging/RequestIds">Request ids</a> correlate JavaScript log messages and server side log messages generated by the same user session.
    </li>
    <li>
        Configure JavaScript loggers in your web.config.
    </li>
    <li>
        Many filtering options to prevent flooding your server with JavaScript log messages.
    </li>
    <li>
        Option to send JavaScript log messages in batches of 2 or more for greater efficiency.
    </li>
    <li>
        Logs JSON objects as well as strings.
    </li>
</ul>

<h2>Next step</h2>

<ul>
    <li>
        Install JSNLog via NuGet (<a href="http://www.nuget.org/packages/JSNLog/">how</a>):
        <pre>Install-Package JSNLog</pre>
        <p />

    </li>
    <li>
    Full documentation is on the web site of the 
    <a href="http://jsnlog.com">JSNLog JavaScript logging package</a>.
    </li>
</ul>

<p>
    If you like this article, please vote for it.
</p>



